{"ast":null,"code":"var _jsxFileName = \"/Users/aigerimsuleimenova/Recoil/recoil-todo-list/src/components/Stats.tsx\";\nimport React from 'react';\nimport { Card } from './Card';\nimport styled from 'styled-components';\nimport { selector, useRecoilState, useRecoilValue } from 'recoil';\nimport { tasksState } from './Tasks';\nimport { taskState } from './Task';\nconst StatContainer = styled.div`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    color: ${props => props.theme.text};\n`;\nconst StatValue = styled.div`\n    font-size: 20px;\n    font-weight: 600;\n    margin-bottom: 5px;\n`;\nconst StatLabel = styled.div`\n    font-size: 11px;\n    text-transform: uppercase;\n`;\n\nconst Stat = ({\n  label,\n  value\n}) => {\n  return /*#__PURE__*/React.createElement(StatContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(StatValue, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, value), /*#__PURE__*/React.createElement(StatLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, label));\n};\n\nconst Divider = styled.div`\n    width: 1px;\n    height: 42px;\n    background-color: ${props => props.theme.text};\n    opacity: 0.3;\n`;\nconst Container = styled(Card)`\n    padding-top: 15px;\n    padding-bottom: 15px;\n    margin-bottom: 20px;\n`;\nconst tasksCompleteState = selector({\n  key: 'tasksComplete',\n  get: ({\n    get\n  }) => {\n    const taskIds = get(tasksState);\n    const tasks = taskIds.map(id => {\n      return get(taskState(id));\n    });\n    return tasks.filter(task => !task.complete).length;\n  }\n});\nconst totalCompletedNum = selector({\n  key: 'totalCompletedNum',\n  get: ({\n    get\n  }) => {\n    const taskIds = get(tasksState);\n    const tasks = taskIds.map(id => {\n      return get(taskState(id));\n    });\n    return tasks.filter(task => task.complete).length;\n  }\n});\nexport const Stats = () => {\n  const tasksComplete = useRecoilValue(tasksCompleteState);\n  const totalCompleted = useRecoilValue(totalCompletedNum);\n  const [tasks, setTasks] = useRecoilState(tasksState);\n  const percentCompleted = tasks.length === 0 ? 0 : totalCompleted / tasks.length * 100;\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Stat, {\n    label: \"Tasks Complete\",\n    value: tasksComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Stat, {\n    label: \"Percent completed:\",\n    value: percentCompleted,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/aigerimsuleimenova/Recoil/recoil-todo-list/src/components/Stats.tsx"],"names":["React","Card","styled","selector","useRecoilState","useRecoilValue","tasksState","taskState","StatContainer","div","props","theme","text","StatValue","StatLabel","Stat","label","value","Divider","Container","tasksCompleteState","key","get","taskIds","tasks","map","id","filter","task","complete","length","totalCompletedNum","Stats","tasksComplete","totalCompleted","setTasks","percentCompleted"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Card} from './Card'\nimport styled from 'styled-components'\nimport {selector, useRecoilState, useRecoilValue} from 'recoil'\nimport { tasksState } from './Tasks'\nimport { taskState } from './Task'\n\nconst StatContainer = styled.div`\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    color: ${(props) => props.theme.text};\n`\n\nconst StatValue = styled.div`\n    font-size: 20px;\n    font-weight: 600;\n    margin-bottom: 5px;\n`\n\nconst StatLabel = styled.div`\n    font-size: 11px;\n    text-transform: uppercase;\n`\n\nconst Stat: React.FC<{label: string; value: string | number}> = ({\n    label,\n    value,\n}) => {\n    return (\n        <StatContainer>\n            <StatValue>{value}</StatValue>\n            <StatLabel>{label}</StatLabel>\n        </StatContainer>\n    )\n}\n\nconst Divider = styled.div`\n    width: 1px;\n    height: 42px;\n    background-color: ${(props) => props.theme.text};\n    opacity: 0.3;\n`\n\nconst Container = styled(Card)`\n    padding-top: 15px;\n    padding-bottom: 15px;\n    margin-bottom: 20px;\n`\nconst  tasksCompleteState = selector({\n    key: 'tasksComplete',\n    get: ({get})=>{\n        const taskIds = get(tasksState)\n        const tasks = taskIds.map(id => {\n            return get(taskState(id))\n        })\n        return tasks.filter(task => !task.complete).length\n    }\n})\n\nconst  totalCompletedNum = selector({\n    key: 'totalCompletedNum',\n    get: ({get})=>{\n        const taskIds = get(tasksState)\n        const tasks = taskIds.map(id => {\n            return get(taskState(id))\n        })\n        return tasks.filter(task => task.complete).length\n    }\n})\n\n\nexport const Stats: React.FC = () => {\n    const tasksComplete = useRecoilValue(tasksCompleteState)\n    const  totalCompleted = useRecoilValue(totalCompletedNum)\n    const [ tasks, setTasks] = useRecoilState(tasksState)\n    const percentCompleted = tasks.length === 0 ? 0 : totalCompleted / tasks.length * 100;\n\n    return (\n        <Container>\n            <Stat label=\"Tasks Complete\" value={tasksComplete} />\n            <Divider />\n            <Divider />\n            <Stat label=\"Percent completed:\" value={percentCompleted} />\n        </Container>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}