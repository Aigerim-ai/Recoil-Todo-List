{"ast":null,"code":"var _jsxFileName = \"/Users/aigerimsuleimenova/Recoil/recoil-todo-list/src/components/Input.tsx\";\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Container as TaskContainer, TextStyle as TaskTextStyle, taskState } from './Task';\nimport { useRecoilState, useRecoilCallback } from 'recoil';\nimport { tasksState } from './Tasks';\nconst InsertInput = styled.input`\n    width: 100%;\n    height: 100%;\n    appearance: none;\n    border: 0;\n    background-color: transparent;\n    outline: none;\n    -webkit-appearance: textfield;\n    ${TaskTextStyle};\n\n    ::-webkit-search-decoration,\n    ::-webkit-search-cancel-button {\n        -webkit-appearance: none;\n    }\n`;\nexport const Input = () => {\n  const [label, setLabel] = useState('');\n  const [tasks, setTasks] = useRecoilState(tasksState);\n  const insertTask = useRecoilCallback(({\n    set\n  }) => {\n    return label => {\n      const newTaskId = tasks.length;\n      set(tasksState, [...tasks, tasks.length]);\n      set(taskState(newTaskId), {\n        label: label,\n        complete: false\n      });\n    };\n  });\n  return /*#__PURE__*/React.createElement(TaskContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InsertInput, {\n    placeholder: \"Insert a new task...\",\n    type: \"search\",\n    autoComplete: \"off\",\n    value: label,\n    onChange: ({\n      currentTarget\n    }) => {\n      setLabel(currentTarget.value);\n    },\n    onKeyUp: ({\n      keyCode\n    }) => {\n      if (keyCode === 13) {\n        insertTask(label);\n        setLabel('');\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/aigerimsuleimenova/Recoil/recoil-todo-list/src/components/Input.tsx"],"names":["React","useState","styled","Container","TaskContainer","TextStyle","TaskTextStyle","taskState","useRecoilState","useRecoilCallback","tasksState","InsertInput","input","Input","label","setLabel","tasks","setTasks","insertTask","set","newTaskId","length","complete","currentTarget","value","keyCode"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,SAAS,IAAIC,aAArB,EAAoCC,SAAS,IAAIC,aAAjD,EAAgEC,SAAhE,QAAgF,QAAhF;AACA,SAAQC,cAAR,EAAwBC,iBAAxB,QAAgD,QAAhD;AACA,SAAQC,UAAR,QAAyB,SAAzB;AAEA,MAAMC,WAAW,GAAGT,MAAM,CAACU,KAAM;;;;;;;;MAQ3BN,aAAc;;;;;;CARpB;AAgBA,OAAO,MAAMO,KAAe,GAAG,MAAM;AACjC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAEe,KAAF,EAASC,QAAT,IAAqBT,cAAc,CAACE,UAAD,CAAzC;AAEA,QAAMQ,UAAU,GAAGT,iBAAiB,CAAC,CAAC;AAACU,IAAAA;AAAD,GAAD,KAAS;AAC1C,WAAQL,KAAD,IAAkB;AACrB,YAAMM,SAAS,GAAGJ,KAAK,CAACK,MAAxB;AACAF,MAAAA,GAAG,CAACT,UAAD,EAAY,CAAC,GAAGM,KAAJ,EAAWA,KAAK,CAACK,MAAjB,CAAZ,CAAH;AACAF,MAAAA,GAAG,CAACZ,SAAS,CAACa,SAAD,CAAV,EAAuB;AACtBN,QAAAA,KAAK,EAAEA,KADe;AAEtBQ,QAAAA,QAAQ,EAAE;AAFY,OAAvB,CAAH;AAIH,KAPD;AAQH,GATmC,CAApC;AAYA,sBACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AACI,IAAA,WAAW,EAAC,sBADhB;AAEI,IAAA,IAAI,EAAC,QAFT;AAGI,IAAA,YAAY,EAAC,KAHjB;AAII,IAAA,KAAK,EAAER,KAJX;AAKI,IAAA,QAAQ,EAAE,CAAC;AAACS,MAAAA;AAAD,KAAD,KAAqB;AAC3BR,MAAAA,QAAQ,CAACQ,aAAa,CAACC,KAAf,CAAR;AACH,KAPL;AAQI,IAAA,OAAO,EAAE,CAAC;AAACC,MAAAA;AAAD,KAAD,KAAe;AACpB,UAAIA,OAAO,KAAK,EAAhB,EAAoB;AAChBP,QAAAA,UAAU,CAACJ,KAAD,CAAV;AACAC,QAAAA,QAAQ,CAAC,EAAD,CAAR;AAEH;AACJ,KAdL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAoBH,CApCM","sourcesContent":["import React, {useState} from 'react'\nimport styled from 'styled-components'\nimport {Container as TaskContainer, TextStyle as TaskTextStyle, taskState} from './Task'\nimport {useRecoilState, useRecoilCallback} from 'recoil'\nimport {tasksState} from './Tasks'\n\nconst InsertInput = styled.input`\n    width: 100%;\n    height: 100%;\n    appearance: none;\n    border: 0;\n    background-color: transparent;\n    outline: none;\n    -webkit-appearance: textfield;\n    ${TaskTextStyle};\n\n    ::-webkit-search-decoration,\n    ::-webkit-search-cancel-button {\n        -webkit-appearance: none;\n    }\n`\n\nexport const Input: React.FC = () => {\n    const [label, setLabel] = useState('')\n    const [ tasks, setTasks] = useRecoilState(tasksState)\n\n    const insertTask = useRecoilCallback(({set})=>{\n        return (label: string) =>{\n            const newTaskId = tasks.length\n            set(tasksState,[...tasks, tasks.length])\n            set(taskState(newTaskId), {\n                label: label,\n                complete: false\n            })\n        }\n    })\n\n\n    return (\n        <TaskContainer>\n            <InsertInput\n                placeholder=\"Insert a new task...\"\n                type=\"search\"\n                autoComplete=\"off\"\n                value={label}\n                onChange={({currentTarget}) => {\n                    setLabel(currentTarget.value)\n                }}\n                onKeyUp={({keyCode}) => {\n                    if (keyCode === 13) {\n                        insertTask(label)\n                        setLabel('')\n\n                    }\n                }}\n            />\n        </TaskContainer>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}